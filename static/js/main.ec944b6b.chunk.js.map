{"version":3,"sources":["encryptPin.js","App.js","reportWebVitals.js","index.js"],"names":["Jose","jose","encryptPin","pin","a","fetch","then","r","json","keyData","rsa_key","Utils","importRsaPublicKey","jwk","cryptographer","WebCryptographer","setContentEncryptionAlgorithm","encrypter","JoseJWE","Encrypter","addHeader","key_id","encrypt","encryptedNumber","App","useState","setPin","encodedPin","setEncodedPin","className","style","marginTop","display","alignItems","flexDirection","justifyContent","maxWidth","value","onChange","e","currentTarget","onClick","setEncodedPinAsync","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAEQA,E,OAASC,EAATD,KAED,SAAeE,EAAtB,kC,4CAAO,WAA0BC,GAA1B,uBAAAC,EAAA,sEACmBC,MAAM,0CAA0CC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAD/E,cACGC,EADH,OAEGC,EAAUV,EAAKW,MAAMC,mBAAmBH,EAAQI,IAAK,aACrDC,EAAgB,IAAId,EAAKe,kBAAkCC,8BAA8B,kBACzFC,EAAY,IAAIjB,EAAKkB,QAAQC,UAAUL,EAAeJ,IAClDU,UAAU,MAAOX,EAAQY,QALhC,UAM2BJ,EAAUK,QAAQnB,GAN7C,eAMGoB,EANH,yBAOIA,GAPJ,6C,iCCyBQC,MAzBf,WACE,MAAsBC,mBAAS,QAA/B,mBAAOtB,EAAP,KAAYuB,EAAZ,KACA,EAAoCD,mBAAS,IAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAUA,OACE,sBAAKC,UAAU,MAAMC,MAAO,CAAEC,UAAW,OAAQC,QAAS,OAAQC,WAAY,SAAUC,cAAe,SAAUC,eAAgB,UAAjI,UACE,gCAEA,uBAAOL,MAAO,CAAEM,SAAU,SAAUC,MAAOlC,EAAKmC,SAAU,SAACC,GAAQb,EAAOa,EAAEC,cAAcH,UAC1F,wBAAQP,MAAO,GAAKW,QAbH,WAAM,4CACzB,sBAAArC,EAAA,kEACEwB,EADF,SACsB1B,EAAWC,GADjC,8EADyB,uBAAC,WAAD,wBAKzBuC,IAQE,uBAEA,oBAAIZ,MAAO,CAACC,UAAW,UACvB,+BAAOJ,QCZEgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ec944b6b.chunk.js","sourcesContent":["import jose from 'jose'\n\nconst { Jose } = jose\n\nexport async function encryptPin(pin) {\n    const keyData = await fetch('https://issuing-key.stripe.com/v1/keys').then(r => r.json())\n    const rsa_key = Jose.Utils.importRsaPublicKey(keyData.jwk, \"RSA-OAEP\");\n    const cryptographer = new Jose.WebCryptographer(); cryptographer.setContentEncryptionAlgorithm(\"A128CBC-HS256\");\n    const encrypter = new Jose.JoseJWE.Encrypter(cryptographer, rsa_key);\n    encrypter.addHeader('kid', keyData.key_id)\n    const encryptedNumber = await encrypter.encrypt(pin)\n    return encryptedNumber \n}","import { useState } from 'react';\nimport './App.css';\nimport {encryptPin} from './encryptPin'\n\nfunction App() {\n  const [pin, setPin] = useState('4252')\n  const [encodedPin, setEncodedPin] = useState('')\n\n  const encodeThePin = () => {\n    async function setEncodedPinAsync() {\n      setEncodedPin(await encryptPin(pin))\n    }\n    \n    setEncodedPinAsync()\n  }\n\n  return (\n    <div className=\"App\" style={{ marginTop: '15px', display: 'flex', alignItems: 'center', flexDirection: 'column', justifyContent: 'center'}}>\n      <div>\n\n      <input style={{ maxWidth: '100px'}} value={pin} onChange={(e) => { setPin(e.currentTarget.value)}}/>\n      <button style={{ }} onClick={encodeThePin}>Encode</button>\n      </div>\n      <hr style={{marginTop: '15px'}}/>\n      <code>{encodedPin}</code>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}